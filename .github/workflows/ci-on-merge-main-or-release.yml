name: "Create application update"

on:
  # Test run before merging
  pull_request:
    branches:
      - main
  # On merged
  push:
    branches:
      - main
  # On released
  release:
    types: [created]

jobs:
  prepare:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-22.04
    name: "Prepare"
    env:
      AWS_REGION: us-west-2
      DEFAULT_BRANCH: main
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0

      - name: Preparing merged branches
        # Fetch the ref of the base branch, just the single commit.
        run: |
          git config --global user.email "bot@zilliqa.com"
          git config --global user.name "Zilliqa Bot"

          echo "Running git checkout ${{ env.DEFAULT_BRANCH }}"

          git checkout ${{ env.DEFAULT_BRANCH }}
          git fetch --all --tags
          git pull --all

          # Checking out the base branch to make this our working branch and
          # merge the head
          echo "Running git checkout ${{ github.base_ref }}"

          git checkout ${{ github.base_ref }}
          git fetch --all --tags
          git pull --all
          python config/workspace-status.py

      - name: Committing head
        if: github.event_name == 'pull_request'
        env:
          HEAD_REF: ${{ github.head_ref }}
        # Fetch the ref of the base branch, just the single commit.
        run: |
          echo "Running git merge --squash ${{ env.HEAD_REF }}"
          git merge --squash ${{ env.HEAD_REF }}

          git add . -A
          git commit -m "Finish merge"
          python config/workspace-status.py

      - name: Bazel cache
        id: cache-bazel-debug
        uses: actions/cache@v3.0.4
        with:
          path: ~/.cache/bazel/
          key: ${{ runner.os }}-bazel-debug

  build-docker:
    needs: prepare
    strategy:
      matrix:
        app: [devex-apollo, neo-savant]
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-22.04
    name: "Build and push (Docker)"
    env:
      AWS_REGION: us-west-2
      DEFAULT_BRANCH: main
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0

      - name: Get tag version
        id: get-version
        run: |
          python config/workspace-status.py | grep FULL_VERSION_TAG | awk '{print $2}' > VERSION
          cat VERSION

      - name: Configure AWS Credentials - staging
        #        if: github.ref_name == env.DEFAULT_BRANCH && github.event_name != 'release'
        uses: Zilliqa/gh-actions-workflows/actions/configure-aws-credentials@v1
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::816080630680:role/ecr-read-write
          oidc-role: ${{ secrets.OIDC_ROLE }}

      - name: Login to the registry - staging
        #        if: github.ref_name == env.DEFAULT_BRANCH && github.event_name != 'release'
        uses: docker/login-action@v2
        with:
          registry: 816080630680.dkr.ecr.us-west-2.amazonaws.com

      - name: "Build and push ${{ matrix.app }} - staging"
        #        if: github.ref_name == env.DEFAULT_BRANCH && github.event_name != 'release'
        run: |
          VERSION=$(cat VERSION)
          docker build --build-arg DEPLOY_ENV="stg" -t ${{ matrix.app }}:local products/${{ matrix.app }}
          docker tag ${{ matrix.app }}:local 816080630680.dkr.ecr.us-west-2.amazonaws.com/${{ matrix.app }}:$VERSION
          docker push 816080630680.dkr.ecr.us-west-2.amazonaws.com/${{ matrix.app }}:$VERSION

      - name: Configure AWS Credentials - production
        if: github.event_name == 'release' && github.event.action == 'created'
        uses: Zilliqa/gh-actions-workflows/actions/configure-aws-credentials@v1
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::298213327629:role/ecr-read-write
          oidc-role: ${{ secrets.OIDC_ROLE }}

      - name: Login to the registry - production
        if: github.event_name == 'release' && github.event.action == 'created'
        uses: docker/login-action@v2
        with:
          registry: 298213327629.dkr.ecr.us-west-2.amazonaws.com

      - name: "Build and push devex-apollo - production"
        if: github.event_name == 'release' && github.event.action == 'created'
        run: |
          VERSION=$(cat VERSION)
          docker build -t devex-apollo:local products/devex-apollo
          docker tag devex-apollo:local 298213327629.dkr.ecr.us-west-2.amazonaws.com/devex-apollo:$VERSION
          docker push 298213327629.dkr.ecr.us-west-2.amazonaws.com/devex-apollo:$VERSION

  build-bazel:
    needs: prepare
    strategy:
      matrix:
        app: [developer-portal, devex]
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-22.04
    name: "Build and push (Bazel)"
    env:
      AWS_REGION: us-west-2
      DEFAULT_BRANCH: main
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0

      - name: Bazel cache
        id: cache-bazel-debug
        uses: actions/cache@v3.0.4
        with:
          path: ~/.cache/bazel/
          key: ${{ runner.os }}-bazel-debug

      - name: Configure AWS Credentials - staging
        if: github.ref_name == env.DEFAULT_BRANCH && github.event_name != 'release'
        uses: Zilliqa/gh-actions-workflows/actions/configure-aws-credentials@v1
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::816080630680:role/ecr-read-write
          oidc-role: ${{ secrets.OIDC_ROLE }}

      - name: Login to the registry - staging
        if: github.ref_name == env.DEFAULT_BRANCH && github.event_name != 'release'
        uses: docker/login-action@v2
        with:
          registry: 816080630680.dkr.ecr.us-west-2.amazonaws.com

      - name: "Build and push Docker - staging"
        if: github.ref_name == env.DEFAULT_BRANCH && github.event_name != 'release'
        run: |
          bazelisk run --test_output=all --keep_going --disk_cache=~/.cache/bazel/ //products/developer-portal:push_image_staging
          bazelisk run --test_output=all --keep_going --disk_cache=~/.cache/bazel/ //products/devex:push_image_staging

      - name: Configure AWS Credentials - production
        if: github.event_name == 'release' && github.event.action == 'created'
        uses: Zilliqa/gh-actions-workflows/actions/configure-aws-credentials@v1
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::298213327629:role/ecr-read-write
          oidc-role: ${{ secrets.OIDC_ROLE }}

      - name: Login to the registry - production
        if: github.event_name == 'release' && github.event.action == 'created'
        uses: docker/login-action@v2
        with:
          registry: 298213327629.dkr.ecr.us-west-2.amazonaws.com

      - name: "Build and push Docker - production"
        if: github.event_name == 'release' && github.event.action == 'created'
        run: |
          bazelisk run --test_output=all --keep_going --disk_cache=~/.cache/bazel/ //products/developer-portal:push_image_production
          bazelisk run --test_output=all --keep_going --disk_cache=~/.cache/bazel/ //products/devex:push_image_production

  update-environment:
    needs: [build-docker, build-bazel]
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-22.04
    name: "Update environment"
    env:
      AWS_REGION: us-west-2
      DEFAULT_BRANCH: main
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0

      - name: Set git config args
        run: |
          git config --global user.email "bot@zilliqa.com"
          git config --global user.name "Zilliqa Bot"

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_SECRET_KET_MANIFESTS }}

      - name: Bazel cache
        id: cache-bazel-debug
        uses: actions/cache@v3.0.4
        with:
          path: ~/.cache/bazel/
          key: ${{ runner.os }}-bazel-debug

      - name: "Creating staging update"
        #        if: github.ref_name == env.DEFAULT_BRANCH && github.event_name != 'release'
        run: |
          bazelisk run //cd:update_staging
        env:
          GITHUB_TOKEN: ${{ github.token }}
          DEVOPS_ACCESS_TOKEN: ${{ secrets.DEVOPS_ACCESS_TOKEN }}
          BUILD_URI_SUFFIX: ${{ github.head_ref }}

      - name: "Creating production update"
        if: github.event_name == 'release' && github.event.action == 'created'
        run: |
          bazelisk run //cd:update_production
        env:
          GITHUB_TOKEN: ${{ github.token }}
          DEVOPS_ACCESS_TOKEN: ${{ secrets.DEVOPS_ACCESS_TOKEN }}
          BUILD_URI_SUFFIX: ${{ github.head_ref }}
