name: "Create application update"

on:
  # Test run before merging
  pull_request:
    branches:
      - main
  # On merged
  push:
    branches:
      - main
  # On released
  release:
    types: [created]

jobs:
  build-docker:
    permissions:
      id-token: write
      contents: write
    runs-on: ubuntu-22.04
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: "Build and deploy"
    env:
      AWS_REGION: us-west-2
      DEFAULT_BRANCH: main
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.GCP_PRD_GITHUB_WIF }}"
          service_account: "${{ secrets.GCP_PRD_GITHUB_SA_GCS_CACHE }}"
          create_credentials_file: true

      - name: Configure bazel GCS cache
        run: |
          export BAZEL_REMOTE_CACHE_CREDENTIALS_JSON='${{ steps.auth.outputs.credentials_file_path }}'
          export BAZEL_REMOTE_CACHE_ENDPOINT='${{ vars.BAZEL_REMOTE_CACHE_ENDPOINT }}'
          python config/gcp_cs_cache.py
        shell: bash

      #### BEGIN PRODUCT CHANGES EVALUATION ####
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          dir_names: "true"
          json: true
          write_output_files: true

      - name: "Analyse project changes"
        id: project-changed
        run: |
          if [ "${{ contains(steps.changed-files.outputs.all_changed_and_modified_files, 'products/developer-portal') }}" = "true" ]; then
            echo "::set-output name=developer-portal::true"
            #echo "developer-portal=true" >> $GITHUB_OUTPUT
          fi
          if [ "${{ contains(steps.changed-files.outputs.all_changed_and_modified_files, 'products/devex') }}" = "true" ]; then
            echo "devex=true" >> $GITHUB_OUTPUT
          fi
          if [ "${{ contains(steps.changed-files.outputs.all_changed_and_modified_files, 'products/devex-apollo') }}" = "true" ]; then
            echo "devex-apollo=true" >> $GITHUB_OUTPUT
          fi
          if [ "${{ contains(steps.changed-files.outputs.all_changed_and_modified_files, 'products/neo-savant') }}" = "true" ]; then
            echo "neo-savant=true" >> $GITHUB_OUTPUT
          fi
      #### END PRODUCT CHANGES EVALUATION ####
      - name: Preparing merged branches
        # Fetch the ref of the base branch, just the single commit.
        run: |
          git config --global user.email "bot@zilliqa.com"
          git config --global user.name "Zilliqa Bot"

          echo "Running git checkout ${{ env.DEFAULT_BRANCH }}"

          git checkout ${{ env.DEFAULT_BRANCH }}
          git fetch --all --tags
          git pull --all

          # Checking out the base branch to make this our working branch and
          # merge the head
          echo "Running git checkout ${{ github.base_ref }}"

          git checkout ${{ github.base_ref }}
          git fetch --all --tags
          git pull --all
          python config/workspace-status.py

      - name: Committing head
        if: github.event_name == 'pull_request'
        env:
          HEAD_REF: ${{ github.head_ref }}
        # Fetch the ref of the base branch, just the single commit.
        run: |
          echo "Running git merge --squash ${{ env.HEAD_REF }}"
          git merge --squash ${{ env.HEAD_REF }}

          git add . -A
          git commit -m "Finish merge"
          python config/workspace-status.py

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_SECRET_KET_MANIFESTS }}

      - name: Get tag version
        id: get-version
        run: |
          python config/workspace-status.py | grep FULL_VERSION_TAG | awk '{print $2}' > VERSION
          cat VERSION

      - name: Configure AWS Credentials - staging
        if: |
          ${{ github.ref_name == env.DEFAULT_BRANCH }} &&
          ${{ github.event_name != 'release' }}
        uses: Zilliqa/gh-actions-workflows/actions/configure-aws-credentials@main
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::816080630680:role/ecr-read-write
          oidc-role: ${{ secrets.OIDC_ROLE }}

      - name: Login to the registry - staging
        if: |
          ${{ github.ref_name == env.DEFAULT_BRANCH }} &&
          ${{ github.event_name != 'release' }}
        uses: docker/login-action@v2
        with:
          registry: 816080630680.dkr.ecr.us-west-2.amazonaws.com

      - name: "Build and push devex-apollo - staging"
        if: |
          ${{ github.ref == github.event.repository.default_branch }} &&
          ${{ github.event_name != 'release' }} &&
          ${{ steps.condition-check.outputs.devex-apollo == 'true' }}
        run: |
          VERSION=$(cat VERSION)
          docker build -t devex-apollo:local products/devex-apollo
          docker tag devex-apollo:local 816080630680.dkr.ecr.us-west-2.amazonaws.com/devex-apollo:$VERSION
          docker push 816080630680.dkr.ecr.us-west-2.amazonaws.com/devex-apollo:$VERSION

      - name: "Build and push Docker - developer-portal - staging"
        if: |
          ${{ github.ref == github.event.repository.default_branch }} &&
          ${{ github.event_name != 'release' }} &&
          ${{ steps.condition-check.outputs.developer-portal == 'true' }}
        run: |
          bazelisk run --test_output=all --keep_going //products/developer-portal:push_image_staging

      - name: "Build neo-savant - staging"
        if: |
          ${{ github.ref == github.event.repository.default_branch }} &&
          ${{ github.event_name != 'release' }} &&
          ${{ steps.condition-check.outputs.neo-savant == 'true' }}
        run: |
          cd products/neo-savant
          mkdir -p savant-artifact/
          docker build --build-arg DEPLOY_ENV="stg" -t "neo-savant:local" .
          docker create --name extractstg "neo-savant:local"
          docker cp extractstg:/usr/share/nginx/html/. "$(pwd)/savant-artifact/"
          docker rm extractstg

      - name: "Build and push Docker - neo-savant - staging"
        if: |
          ${{ github.ref == github.event.repository.default_branch }} &&
          ${{ github.event_name != 'release' }} &&
          ${{ steps.condition-check.outputs.neo-savant == 'true' }}
        run: |
          bazelisk run --test_output=all --keep_going //products/neo-savant:push_image_staging

      - name: "Build and push Docker - devex - staging"
        if: |
          ${{ github.ref == github.event.repository.default_branch }} &&
          ${{ github.event_name != 'release' }} &&
          ${{ steps.condition-check.outputs.devex == 'true' }}
        run: |
          bazelisk run --test_output=all --keep_going //products/devex:push_image_staging

      - name: Configure AWS Credentials - production
        if: |
          ${{ github.event_name == 'release' }} &&
          ${{ github.event.action == 'created' }}
        uses: Zilliqa/gh-actions-workflows/actions/configure-aws-credentials@main
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::298213327629:role/ecr-read-write
          oidc-role: ${{ secrets.OIDC_ROLE }}

      - name: Login to the registry - production
        if: |
          ${{ github.event_name == 'release' }} &&
          ${{ github.event.action == 'created' }}
        uses: docker/login-action@v2
        with:
          registry: 298213327629.dkr.ecr.us-west-2.amazonaws.com

      - name: "Build and push devex-apollo - production"
        if: |
          ${{ github.ref == github.event.repository.default_branch }} &&
          ${{ github.event.action == 'created' }} &&
          ${{ steps.condition-check.outputs.devex-apollo == 'true' }}
        run: |
          VERSION=$(cat VERSION)
          docker build -t devex-apollo:local products/devex-apollo
          docker tag devex-apollo:local 298213327629.dkr.ecr.us-west-2.amazonaws.com/devex-apollo:$VERSION
          docker push 298213327629.dkr.ecr.us-west-2.amazonaws.com/devex-apollo:$VERSION

      - name: "Build neo-savant - production"
        if: |
          ${{ github.ref == github.event.repository.default_branch }} &&
          ${{ github.event.action == 'created' }} &&
          ${{ steps.condition-check.outputs.neo-savant == 'true' }}        
        run: |
          cd products/neo-savant
          mkdir -p savant-artifact/
          docker build --build-arg DEPLOY_ENV="prd" -t "neo-savant:local" .
          docker create --name extractstg "neo-savant:local"
          docker cp extractstg:/usr/share/nginx/html/. "$(pwd)/savant-artifact/"
          docker rm extractstg

      - name: "Build and push Docker - developer-portal - production"
        if: |
          ${{ github.ref == github.event.repository.default_branch }} &&
          ${{ github.event.action == 'created' }} &&
          ${{ steps.condition-check.outputs.developer-portal == 'true' }}        
        run: |
          bazelisk run --test_output=all --keep_going //products/developer-portal:push_image_production

      - name: "Build and push Docker - neo-savant - production"
        if: |
          ${{ github.ref == github.event.repository.default_branch }} &&
          ${{ github.event.action == 'created' }} &&
          ${{ steps.condition-check.outputs.neo-savant == 'true' }}         
        run: |
          bazelisk run --test_output=all --keep_going //products/neo-savant:push_image_production

      - name: "Build and push Docker - devex - production"
        if: |
          ${{ github.ref == github.event.repository.default_branch }} &&
          ${{ github.event.action == 'created' }} &&
          ${{ steps.condition-check.outputs.devex == 'true' }}         
        run: |
          bazelisk run --test_output=all --keep_going //products/devex:push_image_production

      ### BEGIN DEPLOYMENT STAGES
      - name: "Create application.bzl"
        run: |
          echo 'APPLICATIONS = [' > cd/applications.bzl
          if [ "${{ contains(steps.changed-files.outputs.all_changed_and_modified_files, 'products/developer-portal') }}" = "true" ]; then
            echo '    "//products/developer-portal",' >> cd/applications.bzl
          fi
          if [ "${{ contains(steps.changed-files.outputs.all_changed_and_modified_files, 'products/devex') }}" = "true" ]; then
            echo '    "//products/devex",' >> cd/applications.bzl
          fi
          if [ "${{ contains(steps.changed-files.outputs.all_changed_and_modified_files, 'products/devex-apollo') }}" = "true" ]; then
            echo '    "//products/devex-apollo",' >> cd/applications.bzl
          fi
          if [ "${{ contains(steps.changed-files.outputs.all_changed_and_modified_files, 'products/neo-savant') }}" = "true" ]; then
            echo '    "//products/neo-savant",' >> cd/applications.bzl
          fi
          echo ']' >> cd/applications.bzl
          cat cd/applications.bzl

      - name: "Creating staging update"
        if: github.ref_name == env.DEFAULT_BRANCH && github.event_name != 'release'
        run: |
          bazelisk run //cd:update_staging
        env:
          GITHUB_TOKEN: ${{ github.token }}
          DEVOPS_ACCESS_TOKEN: ${{ secrets.DEVOPS_ACCESS_TOKEN }}
          BUILD_URI_SUFFIX: ${{ github.head_ref }}

      - name: "Creating production update"
        if: github.event_name == 'release' && github.event.action == 'created'
        run: |
          bazelisk run //cd:update_production
        env:
          GITHUB_TOKEN: ${{ github.token }}
          DEVOPS_ACCESS_TOKEN: ${{ secrets.DEVOPS_ACCESS_TOKEN }}
          BUILD_URI_SUFFIX: ${{ github.head_ref }}
