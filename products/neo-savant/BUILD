load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_push")
load("@io_bazel_rules_docker//docker/util:run.bzl", "container_run_and_extract")
load("@npm//:react-app-rewired/package_json.bzl", cra_bin = "bin")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("//config:expand-workspace-status.bzl", "expand_workspace_status")

# copy_to_bin(
#     name = "static_files",
#     srcs = glob(
#         [
#             "public/*",
#             "src/**/*",
#         ],
#     ) + [
#         "package.json",
#         "tsconfig.json",
#         "config-overrides.js",
#     ],
# )

# container_image(
#     name = "base1",
#     base = "@docker_node14//image",
#     legacy_run_behavior = False,
#     workdir = "/savant-ide",
# )

# container_image(
#     name = "base2",
#     base = "@docker_node14//image",
#     legacy_run_behavior = False,
#     workdir = "/savant-ide",
# )

# container_run_and_extract(
#     name = "extract_a1",
#     image = ":base1.tar",
#     commands = ["touch /a1.txt",],
#     extract_file = "/a1.txt"
# )
# container_run_and_extract(
#     name = "extract_a2",
#     image = ":base2.tar",
#     commands = ["touch /a2.txt",],
#     extract_file = "/a2.txt"
# )

# container_image(
#     name = "final_image",
#     base = "@docker_node14//image",
#     files = [
#         "extract_a1/a1.txt",
#         "extract_a2/a2.txt",
#     ],
# )

_RUNTIME_DEPS = [
    # ":static_files",
    "//:node_modules/@zilliqa-js/account",
    "//:node_modules/@zilliqa-js/blockchain",
    "//:node_modules/@zilliqa-js/contract",
    "//:node_modules/@zilliqa-js/core",
    "//:node_modules/@zilliqa-js/crypto",
    "//:node_modules/@zilliqa-js/proto",
    "//:node_modules/@zilliqa-js/subscriptions",
    "//:node_modules/@zilliqa-js/util",
    "//:node_modules/@zilliqa-js/zilliqa",
    "//:node_modules/@apollo/client",
    "//:node_modules/@fortawesome/fontawesome-svg-core",
    "//:node_modules/@fortawesome/free-brands-svg-icons",
    "//:node_modules/@fortawesome/free-regular-svg-icons",
    "//:node_modules/@fortawesome/free-solid-svg-icons",
    "//:node_modules/@fortawesome/react-fontawesome",
    "//:node_modules/@types/d3",
    "//:node_modules/@types/sanitize-html",
    "//:node_modules/ace-builds",
    "//:node_modules/apollo-boost",
    "//:node_modules/bootstrap",
    "//:node_modules/d3",
    "//:node_modules/dayjs",
    "//:node_modules/graphql",
    "//:node_modules/leader-line",
    "//:node_modules/leader-line-types",
    "//:node_modules/moment",
    "//:node_modules/numbro",
    "//:node_modules/rc-switch",
    "//:node_modules/react",
    "//:node_modules/react-ace",
    "//:node_modules/react-apollo",
    "//:node_modules/react-beautiful-dnd",
    "//:node_modules/react-bootstrap",
    "//:node_modules/react-contenteditable",
    "//:node_modules/react-custom-scroll",
    "//:node_modules/react-dom",
    "//:node_modules/react-dropzone",
    "//:node_modules/react-fontawesome",
    "//:node_modules/react-router-dom",
    "//:node_modules/react-table",
    "//:node_modules/sanitize-html",
    "//:node_modules/@types/enzyme",
    "//:node_modules/@types/jest",
    "//:node_modules/@types/node",
    "//:node_modules/@types/react",
    "//:node_modules/@types/react-beautiful-dnd",
    "//:node_modules/@types/react-custom-scroll",
    "//:node_modules/@types/react-dom",
    "//:node_modules/@types/react-router-dom",
    "//:node_modules/@types/react-table",
    "//:node_modules/@types/react-test-renderer",
    "//:node_modules/@typescript-eslint/eslint-plugin",
    "//:node_modules/@typescript-eslint/parser",
    "//:node_modules/cz-conventional-changelog",
    "//:node_modules/enzyme",
    "//:node_modules/enzyme-to-json",
    "//:node_modules/eslint-plugin-react",
    "//:node_modules/react-test-renderer",
    "//:node_modules/process",
    "//:node_modules/url",
    "//:node_modules/assert",
    "//:node_modules/crypto-browserify",
    "//:node_modules/stream-http",
    "//:node_modules/https-browserify",
    "//:node_modules/os-browserify",
    "//:node_modules/buffer",
    "//:node_modules/stream-browserify",
    "//:node_modules/string_decoder",
    "//:node_modules/events",
    "//:node_modules/classnames",
    "//:node_modules/tslib",
    "//:node_modules/bip39",
    "//:node_modules/hash.js",
    "//:node_modules/hdkey",
]

# cra_bin.react_app_rewired(
#     # Note: If you want to change the name make sure you update BUILD_PATH below accordingly
#     # https://create-react-app.dev/docs/advanced-configuration/
#     name = "build",
#     srcs = _RUNTIME_DEPS + [
#         "//:node_modules/react-app-rewired",
#         "//:node_modules/react-scripts",
#         "//:node_modules/typescript",
#         "//:node_modules/web-vitals",
#         "//:node_modules/webpack",
#     ],
#     args = ["build"],
#     chdir = package_name(),
#     env = {
#         "BUILD_PATH": "./build",
#     },
#     out_dirs = ["build"],
# )

filegroup(
    name = "workspace",
    srcs = glob([
        "**",
    ]),
    # visibility = ["//visibility:public"],
)

# genrule(
#     name = "concat_all_files",
#     srcs = [
#         ":exported_testdata",  # a filegroup with multiple files in it ==> $(locations)
#     ],
#     outs = ["concatenated.txt"],
#     # cmd = "cat $(locations //some:files) $(location //other:gen) > $@",
#     cmd = "npm install > $@",
# )

pkg_tar(
    name = "package_workspace",
    srcs = [
        ":workspace",
    ],
    include_runfiles = True,
    mode = "0755",
    package_dir = "/savant-ide",
    strip_prefix = ".",
)

container_image(
    name = "layer_staging",
    base = "@docker_node14//image",
    env = {
        "DEPLOY_ENV": "stg",
    },
    entrypoint = [
        "bash",
        "-c",
    ],
    legacy_run_behavior = False,
    tars = [":package_workspace"],
    workdir = "/savant-ide",
)

# container_run_and_extract(
#     name = "extract_a2",
#     image = ":base1.tar",
#     commands = ["touch /a2.txt",],
#     extract_file = "/a2.txt"
# )

# container_image(
#     name = "final_image",
#     base = "@docker_node14//image",
#     files = [
#         "extract_a2/a2.txt",
#     ],
# )

# container_run_and_commit(
#     name = "image-with-deps",
#     commands = [
#         "mv .env_stg .env",
#         "npm install",
#         "npm rebuild node-sass",
#         "npm run build",
#     ],
#     image = ":image-package.tar",
# )

container_run_and_extract(
    name = "build_staging",
    commands = [
        "mv .env_stg .env",
        "npm install",
        "npm rebuild node-sass",
        "npm run build",
        # "mkdir -p /usr/share/nginx/html",
        # "cd /savant-ide/dist && cp -R . /usr/share/nginx/html",
        # "tar -cvf /dist.tar /usr/share/nginx/html",
    ],
    extract_file = "/savant-ide/.env",
    image = ":layer_staging.tar",
)

container_image(
    name = "final_image",
    base = "@docker_node14//image",
    files = [
        "build_staging/savant-ide/.env",
    ],
)

container_run_and_extract(
    name = "image-with-deps",
    commands = [
        "ls",
        # "touch /foo.txt",
        # "echo 'test' > /foo.txt",
    ],
    # docker_run_flags = [
    #     "-u",
    #     "root",
    # ],
    # legacy_run_behavior = True,
    extract_file = "/savant-ide/README.md",
    image = ":image-package.tar",
)

# pkg_tar(
#     name = "app-tar",
#     srcs = [":**"],
#     include_runfiles = True,
#     mode = "0755",
#     package_dir = "/savant-ide",
#     strip_prefix = ".",
# )

# container_image(
#     name = "final_image",
#     base = "@ubuntu16//image",
#     files = [
#         "extract_a1/a1.txt",
#         "extract_a2/a2.txt",
#     ],
# )

container_image(
    name = "image_stag",
    base = "@nginx-alpine//image",
    entrypoint = [
        "nginx",
        "-g",
        "daemon off;",
    ],
    env = {},
    # tars = [":app-tar"],
    # workdir = "/savant-ide",
    files = [
        "image-with-deps/dist.tar",
    ],
    legacy_run_behavior = False,
    ports = ["80"],
)

container_push(
    name = "push_image_stag",
    format = "Docker",
    image = ":image_stag",
    registry = "816080630680.dkr.ecr.us-west-2.amazonaws.com",
    repository = "scilla-savant-ide",

    # Tagging from workspace status - requires --stamp as build args
    tag = "{FULL_VERSION_TAG}",
)

container_image(
    name = "image_prod",
    base = "@nginx//image",
    env = {
        "DEPLOY_ENV": "prd",
    },

    # Disabling legacy run behaviour to allow run from the command line
    legacy_run_behavior = False,
    ports = ["80"],
    # tars = [
    #     ":html-folder",
    #     ":nignx-conf",
    # ],
)

container_push(
    name = "push_image_prd",
    format = "Docker",
    image = ":image_prod",
    registry = "298213327629.dkr.ecr.us-west-2.amazonaws.com",
    repository = "scilla-savant-ide",

    # Tagging from workspace status - requires --stamp as build args
    tag = "{FULL_VERSION_TAG}",
)

###
# CD update
expand_workspace_status(
    name = "staging-kustomization",
    output = "products/neo-savant-ide/cd/overlays/staging/kustomization.yaml",
    template = "cd/applications/neo-savant-ide/overlays/staging/kustomization.tpl.yaml",
)

pkg_tar(
    name = "cd_staging_patch",
    srcs = ["products/neo-savant-ide/cd/overlays/staging/kustomization.yaml"],
    mode = "0755",
    package_dir = "",
    strip_prefix = ".",
    visibility = ["//visibility:public"],
)

expand_workspace_status(
    name = "production-kustomization",
    output = "products/neo-savant-ide/cd/overlays/production/kustomization.yaml",
    template = "cd/applications/neo-savant-ide/overlays/production/kustomization.tpl.yaml",
)

pkg_tar(
    name = "cd_production_patch",
    srcs = ["products/neo-savant-ide/cd/overlays/production/kustomization.yaml"],
    mode = "0755",
    package_dir = "",
    strip_prefix = ".",
    visibility = ["//visibility:public"],
)

cra_bin.react_app_rewired_binary(
    name = "start",
    args = [
        "start",
    ],
    chdir = package_name(),
    data = _RUNTIME_DEPS + [
        "//:node_modules/react-app-rewired",
        "//:node_modules/react-scripts",
        "//:node_modules/typescript",
        "//:node_modules/web-vitals",
        "//:tsconfig.base",
        "//:node_modules/webpack",
    ],
    tags = [
        # This tag instructs ibazel to pipe into stdin a event describing actions.
        # ibazel send EOF to stdin by default and `react-scripts start` will stop when getting EOF in stdin.
        # So use this to prevent EOF.
        "ibazel_notify_changes",
    ],
)

# TODO: Many snapshot based tests with heuristic class names.
# cra_bin.react_app_rewired_test(
#     name = "test",
#     args = [
#         "test",
#         # ibazel is the watch mode for Bazel when running tests
#         # Because Bazel is really a CI system that runs locally
#         "--watchAll=false",
#         # https://jestjs.io/docs/cli#--cache. Whether to use the cache. Defaults to true. Disable
#         # the cache using --no-cache. Caching is Bazel's job, we don't want non-hermeticity
#         "--no-cache",
#         # https://jestjs.io/docs/cli#--watchman. Whether to use watchman for file crawling. Defaults
#         # to true. Disable using --no-watchman. Watching is ibazel's job
#         "--no-watchman",
#         # https://jestjs.io/docs/cli#--ci. When this option is provided, Jest will assume it is
#         # running in a CI environment. This changes the behavior when a new snapshot is encountered.
#         # Instead of the regular behavior of storing a new snapshot automatically, it will fail the
#         # test and require Jest to be run with --updateSnapshot.
#         "--ci",
#         # Needed for Jest to walk the filesystem to find inputs.
#         # See https://github.com/facebook/jest/pull/9351
#         "--haste",
#         "{\\\"enableSymlinks\\\":\\ true}",
#     ],
#     chdir = package_name(),
#     data = _RUNTIME_DEPS + [
#         "copy_test_files",
#         "//:node_modules/@testing-library/jest-dom",
#         "//:node_modules/@testing-library/react",
#         "//:node_modules/@testing-library/user-event",
#         "//:node_modules/typescript",
#         "//:node_modules/jest-watch-typeahead",
#         "//:node_modules/webpack",
#     ],
# )
