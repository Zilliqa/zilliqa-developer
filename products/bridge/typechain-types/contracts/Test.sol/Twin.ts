/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TwinInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dispatched"
      | "finish"
      | "initialize"
      | "queried"
      | "start"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Failed" | "Initialized" | "Succeeded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "dispatched",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finish",
    values: [boolean, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "queried",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "start",
    values: [AddressLike, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "dispatched", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finish", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queried", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
}

export namespace FailedEvent {
  export type InputTuple = [arg0: string];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SucceededEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Twin extends BaseContract {
  connect(runner?: ContractRunner | null): Twin;
  waitForDeployment(): Promise<this>;

  interface: TwinInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dispatched: TypedContractMethod<
    [target: AddressLike, call: BytesLike],
    [[boolean, string] & { success: boolean; response: string }],
    "payable"
  >;

  finish: TypedContractMethod<
    [success: boolean, res: BytesLike, nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<[relayer: AddressLike], [void], "nonpayable">;

  queried: TypedContractMethod<
    [target: AddressLike, call: BytesLike],
    [[boolean, string] & { success: boolean; response: string }],
    "view"
  >;

  start: TypedContractMethod<
    [target: AddressLike, num: BigNumberish, readonly: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dispatched"
  ): TypedContractMethod<
    [target: AddressLike, call: BytesLike],
    [[boolean, string] & { success: boolean; response: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "finish"
  ): TypedContractMethod<
    [success: boolean, res: BytesLike, nonce: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[relayer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "queried"
  ): TypedContractMethod<
    [target: AddressLike, call: BytesLike],
    [[boolean, string] & { success: boolean; response: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "start"
  ): TypedContractMethod<
    [target: AddressLike, num: BigNumberish, readonly: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Failed"
  ): TypedContractEvent<
    FailedEvent.InputTuple,
    FailedEvent.OutputTuple,
    FailedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Succeeded"
  ): TypedContractEvent<
    SucceededEvent.InputTuple,
    SucceededEvent.OutputTuple,
    SucceededEvent.OutputObject
  >;

  filters: {
    "Failed(string)": TypedContractEvent<
      FailedEvent.InputTuple,
      FailedEvent.OutputTuple,
      FailedEvent.OutputObject
    >;
    Failed: TypedContractEvent<
      FailedEvent.InputTuple,
      FailedEvent.OutputTuple,
      FailedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Succeeded(uint256)": TypedContractEvent<
      SucceededEvent.InputTuple,
      SucceededEvent.OutputTuple,
      SucceededEvent.OutputObject
    >;
    Succeeded: TypedContractEvent<
      SucceededEvent.InputTuple,
      SucceededEvent.OutputTuple,
      SucceededEvent.OutputObject
    >;
  };
}
