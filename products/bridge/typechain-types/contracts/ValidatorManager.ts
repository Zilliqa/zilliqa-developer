/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ValidatorManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addValidator"
      | "getValidators"
      | "hasSupermajority"
      | "isValidator"
      | "removeValidator"
      | "validateSignature"
      | "validateUniqueSignatures"
      | "validatorsCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasSupermajority",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUniqueSignatures",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorsCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSupermajority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUniqueSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorsCount",
    data: BytesLike
  ): Result;
}

export interface ValidatorManager extends BaseContract {
  connect(runner?: ContractRunner | null): ValidatorManager;
  waitForDeployment(): Promise<this>;

  interface: ValidatorManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addValidator: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "nonpayable"
  >;

  getValidators: TypedContractMethod<[], [string[]], "view">;

  hasSupermajority: TypedContractMethod<
    [count: BigNumberish],
    [boolean],
    "view"
  >;

  isValidator: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  removeValidator: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "nonpayable"
  >;

  validateSignature: TypedContractMethod<
    [ethSignedMessageHash: BytesLike, signature: BytesLike],
    [boolean],
    "view"
  >;

  validateUniqueSignatures: TypedContractMethod<
    [ethSignedMessageHash: BytesLike, signatures: BytesLike[]],
    [boolean],
    "view"
  >;

  validatorsCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addValidator"
  ): TypedContractMethod<[user: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getValidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasSupermajority"
  ): TypedContractMethod<[count: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidator"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeValidator"
  ): TypedContractMethod<[user: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "validateSignature"
  ): TypedContractMethod<
    [ethSignedMessageHash: BytesLike, signature: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateUniqueSignatures"
  ): TypedContractMethod<
    [ethSignedMessageHash: BytesLike, signatures: BytesLike[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "validatorsCount"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
