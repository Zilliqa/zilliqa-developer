/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RelayerInterface extends Interface {
  getFunction(
    nameOrSignature: "deployTwin" | "dispatch" | "query" | "relay" | "resume"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Dispatched"
      | "Relayed"
      | "Resumed"
      | "TwinDeployment"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deployTwin",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatch",
    values: [
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "query",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relay",
    values: [AddressLike, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resume",
    values: [
      AddressLike,
      BytesLike,
      boolean,
      BytesLike,
      BigNumberish,
      BytesLike[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "deployTwin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dispatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "query", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
}

export namespace DispatchedEvent {
  export type InputTuple = [
    caller: AddressLike,
    callback: BytesLike,
    success: boolean,
    response: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    callback: string,
    success: boolean,
    response: string,
    nonce: bigint
  ];
  export interface OutputObject {
    caller: string;
    callback: string;
    success: boolean;
    response: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayedEvent {
  export type InputTuple = [
    caller: AddressLike,
    target: AddressLike,
    call: BytesLike,
    readonly: boolean,
    callback: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    target: string,
    call: string,
    readonly: boolean,
    callback: string,
    nonce: bigint
  ];
  export interface OutputObject {
    caller: string;
    target: string;
    call: string;
    readonly: boolean;
    callback: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResumedEvent {
  export type InputTuple = [
    caller: AddressLike,
    call: BytesLike,
    success: boolean,
    response: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    call: string,
    success: boolean,
    response: string,
    nonce: bigint
  ];
  export interface OutputObject {
    caller: string;
    call: string;
    success: boolean;
    response: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TwinDeploymentEvent {
  export type InputTuple = [twin: AddressLike];
  export type OutputTuple = [twin: string];
  export interface OutputObject {
    twin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Relayer extends BaseContract {
  connect(runner?: ContractRunner | null): Relayer;
  waitForDeployment(): Promise<this>;

  interface: RelayerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployTwin: TypedContractMethod<
    [salt: BytesLike, bytecode: BytesLike],
    [string],
    "nonpayable"
  >;

  dispatch: TypedContractMethod<
    [
      caller: AddressLike,
      target: AddressLike,
      call: BytesLike,
      callback: BytesLike,
      nonce: BigNumberish,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  query: TypedContractMethod<
    [caller: AddressLike, target: AddressLike, call: BytesLike],
    [[boolean, string] & { success: boolean; response: string }],
    "view"
  >;

  relay: TypedContractMethod<
    [
      target: AddressLike,
      call: BytesLike,
      readonly: boolean,
      callback: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  resume: TypedContractMethod<
    [
      caller: AddressLike,
      callback: BytesLike,
      success: boolean,
      response: BytesLike,
      nonce: BigNumberish,
      signatures: BytesLike[]
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployTwin"
  ): TypedContractMethod<
    [salt: BytesLike, bytecode: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dispatch"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      target: AddressLike,
      call: BytesLike,
      callback: BytesLike,
      nonce: BigNumberish,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "query"
  ): TypedContractMethod<
    [caller: AddressLike, target: AddressLike, call: BytesLike],
    [[boolean, string] & { success: boolean; response: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "relay"
  ): TypedContractMethod<
    [
      target: AddressLike,
      call: BytesLike,
      readonly: boolean,
      callback: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resume"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      callback: BytesLike,
      success: boolean,
      response: BytesLike,
      nonce: BigNumberish,
      signatures: BytesLike[]
    ],
    [void],
    "payable"
  >;

  getEvent(
    key: "Dispatched"
  ): TypedContractEvent<
    DispatchedEvent.InputTuple,
    DispatchedEvent.OutputTuple,
    DispatchedEvent.OutputObject
  >;
  getEvent(
    key: "Relayed"
  ): TypedContractEvent<
    RelayedEvent.InputTuple,
    RelayedEvent.OutputTuple,
    RelayedEvent.OutputObject
  >;
  getEvent(
    key: "Resumed"
  ): TypedContractEvent<
    ResumedEvent.InputTuple,
    ResumedEvent.OutputTuple,
    ResumedEvent.OutputObject
  >;
  getEvent(
    key: "TwinDeployment"
  ): TypedContractEvent<
    TwinDeploymentEvent.InputTuple,
    TwinDeploymentEvent.OutputTuple,
    TwinDeploymentEvent.OutputObject
  >;

  filters: {
    "Dispatched(address,bytes4,bool,bytes,uint256)": TypedContractEvent<
      DispatchedEvent.InputTuple,
      DispatchedEvent.OutputTuple,
      DispatchedEvent.OutputObject
    >;
    Dispatched: TypedContractEvent<
      DispatchedEvent.InputTuple,
      DispatchedEvent.OutputTuple,
      DispatchedEvent.OutputObject
    >;

    "Relayed(address,address,bytes,bool,bytes4,uint256)": TypedContractEvent<
      RelayedEvent.InputTuple,
      RelayedEvent.OutputTuple,
      RelayedEvent.OutputObject
    >;
    Relayed: TypedContractEvent<
      RelayedEvent.InputTuple,
      RelayedEvent.OutputTuple,
      RelayedEvent.OutputObject
    >;

    "Resumed(address,bytes,bool,bytes,uint256)": TypedContractEvent<
      ResumedEvent.InputTuple,
      ResumedEvent.OutputTuple,
      ResumedEvent.OutputObject
    >;
    Resumed: TypedContractEvent<
      ResumedEvent.InputTuple,
      ResumedEvent.OutputTuple,
      ResumedEvent.OutputObject
    >;

    "TwinDeployment(address)": TypedContractEvent<
      TwinDeploymentEvent.InputTuple,
      TwinDeploymentEvent.OutputTuple,
      TwinDeploymentEvent.OutputObject
    >;
    TwinDeployment: TypedContractEvent<
      TwinDeploymentEvent.InputTuple,
      TwinDeploymentEvent.OutputTuple,
      TwinDeploymentEvent.OutputObject
    >;
  };
}
