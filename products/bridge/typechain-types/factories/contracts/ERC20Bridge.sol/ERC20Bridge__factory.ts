/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ERC20Bridge,
  ERC20BridgeInterface,
} from "../../../contracts/ERC20Bridge.sol/ERC20Bridge";

const _abi = [
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "Failed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "Started",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Succeeded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "bridge",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "call",
        type: "bytes",
      },
    ],
    name: "dispatched",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "exit",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "res",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "finish",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract Relayer",
        name: "relayer",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "call",
        type: "bytes",
      },
    ],
    name: "queried",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c2b806100206000396000f3fe6080604052600436106100555760003560e01c80635d903f031461005a57806371006c091461008457806382dcc731146100b257806387121759146100d2578063b2c642d1146100f2578063c4d66de814610114575b600080fd5b61006d610068366004610847565b610134565b60405161007b92919061092a565b60405180910390f35b34801561009057600080fd5b506100a461009f36600461094d565b610205565b60405190815260200161007b565b3480156100be57600080fd5b5061006d6100cd366004610847565b61031b565b3480156100de57600080fd5b506100a46100ed36600461094d565b6103cb565b3480156100fe57600080fd5b5061011261010d36600461099c565b6104a4565b005b34801561012057600080fd5b5061011261012f366004610a27565b6105b7565b600080546060906001600160a01b0316331461016b5760405162461bcd60e51b815260040161016290610a4b565b60405180910390fd5b6101986040518060400160405280600c81526020016b64697370617463686564282960a01b8152506106d5565b836001600160a01b031634620186a090856040516101b69190610a82565b600060405180830381858888f193505050503d80600081146101f4576040519150601f19603f3d011682016040523d82523d6000602084013e6101f9565b606091505b50909590945092505050565b604051632770a7eb60e21b81526001600160a01b0383811660048301526024820183905260009190851690639dc29fac90604401600060405180830381600087803b15801561025357600080fd5b505af1158015610267573d6000803e3d6000fd5b50506040516001600160a01b0386166024820152604481018590526102c6925086915060640160408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052600063b2c642d160e01b61071b565b604080516001600160a01b038088168252861660208201529081018490529091507ff9fc8619f47185576c57bcb55a726e87aedd0c97599424af8325993da54083209060600160405180910390a19392505050565b600080546060906001600160a01b031633146103495760405162461bcd60e51b815260040161016290610a4b565b6103736040518060400160405280600981526020016871756572696564282960b81b8152506106d5565b836001600160a01b0316620186a08460405161038f9190610a82565b6000604051808303818686fa925050503d80600081146101f4576040519150601f19603f3d011682016040523d82523d6000602084013e6101f9565b6040516323b872dd60e01b81526001600160a01b03838116600483015230602483015260448201839052600091908516906323b872dd906064016020604051808303816000875af1158015610424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104489190610a9e565b506040516001600160a01b0384166024820152604481018390526102c690859060640160408051601f198184030181529190526020810180516001600160e01b03166340c10f1960e01b179052600063b2c642d160e01b61071b565b6000546001600160a01b031633146104ce5760405162461bcd60e51b815260040161016290610a4b565b8315610502576040517f318ba0c588a4bde325b55ebf926bfa606b77d9971ac5fc7250a615885daf9d5c90600090a16105b1565b60006105116004828587610abb565b61051a91610ae5565b9050600061052b8460048188610abb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505082519293507fc65844e8ee2558ed559edaad0fdb8d4149b19d5bb4d863bc498bed24f6b2df519261059992508401602090810191508401610b15565b6040516105a69190610b83565b60405180910390a150505b50505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156105fd5750825b905060008267ffffffffffffffff16600114801561061a5750303b155b905081158015610628575080155b156106465760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561067057845460ff60401b1916600160401b1785555b600080546001600160a01b0319166001600160a01b03881617905583156106cd57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906020016105a6565b505050505050565b610718816040516024016106e99190610b83565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261079e565b50565b6000805460405163139b4a8760e01b81526001600160a01b039091169063139b4a8790610752908890889088908890600401610b96565b6020604051808303816000875af1158015610771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107959190610bdc565b95945050505050565b6107188160006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b6001600160a01b038116811461071857600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610817576108176107d8565b604052919050565b600067ffffffffffffffff821115610839576108396107d8565b50601f01601f191660200190565b6000806040838503121561085a57600080fd5b8235610865816107c3565b9150602083013567ffffffffffffffff81111561088157600080fd5b8301601f8101851361089257600080fd5b80356108a56108a08261081f565b6107ee565b8181528660208385010111156108ba57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60005b838110156108f55781810151838201526020016108dd565b50506000910152565b600081518084526109168160208601602086016108da565b601f01601f19169290920160200192915050565b821515815260406020820152600061094560408301846108fe565b949350505050565b60008060006060848603121561096257600080fd5b833561096d816107c3565b9250602084013561097d816107c3565b929592945050506040919091013590565b801515811461071857600080fd5b600080600080606085870312156109b257600080fd5b84356109bd8161098e565b9350602085013567ffffffffffffffff808211156109da57600080fd5b818701915087601f8301126109ee57600080fd5b8135818111156109fd57600080fd5b886020828501011115610a0f57600080fd5b95986020929092019750949560400135945092505050565b600060208284031215610a3957600080fd5b8135610a44816107c3565b9392505050565b60208082526019908201527f4d7573742062652063616c6c65642062792072656c6179657200000000000000604082015260600190565b60008251610a948184602087016108da565b9190910192915050565b600060208284031215610ab057600080fd5b8151610a448161098e565b60008085851115610acb57600080fd5b83861115610ad857600080fd5b5050820193919092039150565b6001600160e01b03198135818116916004851015610b0d5780818660040360031b1b83161692505b505092915050565b600060208284031215610b2757600080fd5b815167ffffffffffffffff811115610b3e57600080fd5b8201601f81018413610b4f57600080fd5b8051610b5d6108a08261081f565b818152856020838501011115610b7257600080fd5b6107958260208301602086016108da565b602081526000610a4460208301846108fe565b6001600160a01b0385168152608060208201819052600090610bba908301866108fe565b9315156040830152506001600160e01b03199190911660609091015292915050565b600060208284031215610bee57600080fd5b505191905056fea2646970667358221220f7d98b7bb6dc5c7058d0fcefe332656b18c25f186a937b55e96204abf67fc85d64736f6c63430008140033";

type ERC20BridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20BridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Bridge__factory extends ContractFactory {
  constructor(...args: ERC20BridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC20Bridge & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20Bridge__factory {
    return super.connect(runner) as ERC20Bridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20BridgeInterface {
    return new Interface(_abi) as ERC20BridgeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20Bridge {
    return new Contract(address, _abi, runner) as unknown as ERC20Bridge;
  }
}
