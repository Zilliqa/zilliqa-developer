scilla_version 0

import BoolUtils ListUtils IntUtils

library TokenVesting

(***************************************************)
(*               Global variables                  *)
(***************************************************)

type Vest = | Vest of Uint128 Uint64 Uint64 Uint64 (* token,start_date,expiration_date,claimed_date *)
let zero_address = 0x0000000000000000000000000000000000000000
let zero = Uint128 0
let zero_uint64 = Uint64 0
let false = False
let true = True
let bystr16_empty_string: ByStr16 = 0x00000000000000000000000000000000


type VestingParam =
| VestingParam of ByStr20 Uint128 Uint64 Uint64 (* wallet_address,token,start_date,expiration_date *)

(***************************************************)
(*               Library functions                 *)
(***************************************************)

let one_msg = 
  fun (msg: Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg
    
type Error =
  | NotPausedError
  | PausedError
  | NotContractOwnerError
  | NotContractOwnerOrAdminError
  | InvalidAddressPassed
  | InvalidAmountPassed
  | InvalidDatePassed
  | SelfError
  | NotContractOwnershipRecipientError
  | CodeInsufficientFunds

let make_error =
fun (result: Error) =>
  let result_code =
    match result with
    | NotPausedError                     => Int32 -1
    | PausedError                        => Int32 -2
    | NotContractOwnerError              => Int32 -3
    | NotContractOwnerOrAdminError       => Int32 -4
    | InvalidAddressPassed               => Int32 -5
    | InvalidAmountPassed                => Int32 -6
    | InvalidDatePassed                  => Int32 -7
    | SelfError                          => Int32 -8
    | NotContractOwnershipRecipientError => Int32 -9
    | CodeInsufficientFunds              => Int32 -10
    end
  in
  { _exception: "Error"; code: result_code }
  
let update_vested_param : Vest -> Uint64 -> Vest =
  fun (reward_param : Vest) =>
  fun (current_date : Uint64) =>
    match reward_param with
    | Vest vested_amount start_date expiration_date claimed_date=>
      let is_eq_block_zero = builtin eq expiration_date zero_uint64 in
      match is_eq_block_zero with
      | True =>
        (* Updating expiration_date in ADT with current date *)
          Vest vested_amount start_date current_date claimed_date
      | False =>
          (* No change required hence returning same object *)
          Vest vested_amount start_date expiration_date claimed_date
      end
    end

let update_all_vested_params : forall 'A. List Vest -> Uint64  -> List Vest =
  tfun 'A =>
  fun (l : List Vest) =>
  fun (current_date : Uint64) =>
  let foldl = @list_foldl Vest (List Vest) in
  let init = Nil {Vest} in
  let iter =
    fun (vested_params_list : List Vest) =>
    fun (vested_param : Vest) =>
      let updated_vested_param = update_vested_param vested_param current_date in
        Cons {Vest} updated_vested_param vested_params_list
  in
    foldl iter init l

    
let get_value =
  fun (var : Option Uint128) =>
    match var with
    | Some v => v
    | None => zero (* should never happen *)
    end

(* timestamp less than or equal to *)
let uint64_le : Uint64 -> Uint64 -> Bool =
  fun(ts1 : Uint64) =>
  fun(ts2 : Uint64) =>
    let is_ts1_lt_ts2 = uint64_lt ts1 ts2 in
    let is_ts1_eq_ts2 = builtin eq  ts1 ts2 in
    orb is_ts1_lt_ts2 is_ts1_eq_ts2

let calculate_claim_amount : Vest -> Uint64 -> Uint128 =
fun (reward_param : Vest) =>
fun (current_date : Uint64) =>
  match reward_param with
  | Vest vested_amount start_date expiration_date claimed_date=>
    let is_valid_date = uint64_le expiration_date current_date in
    match is_valid_date with
    | True =>
        vested_amount
    | False =>
        zero
    end
  end
      
let calculate_all_claim_amount : forall 'A. List Vest -> Uint64  -> Uint128 =
  tfun 'A =>
  fun (l : List Vest) =>
  fun (current_date : Uint64) =>
  let foldl = @list_foldl Vest Uint128 in
  let init = Uint128 0 in
  let iter =
    fun (initial_amount : Uint128) =>
    fun (vested_param : Vest) =>
      let calculated_claim_amount = calculate_claim_amount vested_param current_date in
        builtin add calculated_claim_amount initial_amount
  in
    foldl iter init l

let bystr_to_bystr16: ByStr -> ByStr16 =
fun(str : ByStr) =>
  let bystr16 = builtin to_bystr16 str in
    match bystr16 with
      | Some res => res
      | None => bystr16_empty_string
    end

let update_claimed_param : Vest -> Uint64 -> Vest =
fun (reward_param : Vest) =>
fun (current_date : Uint64) =>
  match reward_param with
  | Vest vested_amount start_date expiration_date claimed_date =>
    let is_valid_date = uint64_lt expiration_date current_date in
    let is_first_time_update = builtin eq claimed_date zero_uint64 in
    let is_valid = andb is_valid_date is_first_time_update in
    match is_valid with
      | True =>
        Vest vested_amount start_date expiration_date current_date
      | False =>
        Vest vested_amount start_date expiration_date claimed_date
    end
  end

let update_all_claimed_params : forall 'A. List Vest -> Uint64  -> List Vest =
  tfun 'A =>
  fun (l : List Vest) =>
  fun (current_time : Uint64) =>
  let foldl = @list_foldl Vest (List Vest) in
  let init = Nil {Vest} in
  let iter =
    fun (vested_params_list : List Vest) =>
    fun (vested_param : Vest) =>
      let updated_vested_param = update_claimed_param vested_param current_time in
        Cons {Vest} updated_vested_param vested_params_list
    in
      foldl iter init l

let uint256_to_uint64 : Uint256 -> Uint64 =
  fun (x : Uint256) =>
    let ox64 = builtin to_uint64 x in
      match ox64 with
      | None =>
        (* this never happens, hence we throw a division by zero exception just in case *)
        let zero = Uint64 0 in
        builtin div zero zero
      | Some x64 => x64
      end

let uint64_to_uint256 : Uint64 -> Uint256 =
  fun (x : Uint64) =>
    let ox256 = builtin to_uint256 x in
      match ox256 with
      | None =>
        (* this never happens, hence we throw a division by zero exception just in case *)
        let zero = Uint256 0 in
        builtin div zero zero
      | Some x256 => x256
      end

let int256_to_uint128 : Int256 -> Uint128 =
  fun (x : Int256) =>
    let ox128 = builtin to_uint128 x in
      match ox128 with
      | None =>
        (* this never happens, hence we throw a division by zero exception just in case *)
        let zero = Uint128 0 in
        builtin div zero zero
      | Some x128 => x128
      end

let uint128_to_uint256 : Uint128 -> Uint256 =
  fun (x : Uint128) =>
    let ox256 = builtin to_uint256 x in
      match ox256 with
      | None =>
        (* this never happens, hence we throw a division by zero exception just in case *)
        let zero = Uint256 0 in
        builtin div zero zero
      | Some x256 => x256
      end

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (maybe_val: Option 'A) =>
    match maybe_val with
    | Some v => v
    | None => default
    end
          
let option_timestamp = @option_value Uint64
      
let get_prev_bnum=
  fun(cur_blk:BNum) =>
    let one_bnum = BNum 1 in
    let zero_block = BNum 0 in
    let prev_block =  builtin bsub cur_blk one_bnum in
    let prev_block_uint128 = int256_to_uint128 prev_block in
    builtin badd zero_block prev_block_uint128

let add_days_in_time = 
  fun(t:Uint64) =>
  fun(d:Uint64) =>
    let t256 = uint64_to_uint256 t in
    let d256 = uint64_to_uint256 d in
    let m256 = Uint256 86400000000 in
    let d256_x_m256 = builtin mul d256 m256 in
    let t256_add_d256_x_m256 = builtin add t256 d256_x_m256 in
    uint256_to_uint64 t256_add_d256_x_m256

(***************************************************)
(*             The contract definition             *)
(***************************************************)

(* initial_owner                  ByStr20 - Owner of the contract                                         *)
(* initial_token_contract         ByStr20 - ZRC2 token address which will be paired with zil for swap     *)

contract TokenVesting(
  initial_owner: ByStr20,
  initial_token_contract: ByStr20 with contract
    field total_supply : Uint128,
    field balances: Map ByStr20 Uint128,
    field allowances: Map ByStr20 (Map ByStr20 Uint128)
  end
)

(***************************************************)
(*             Mutable variables                   *)
(***************************************************)

(* Defaults to True *)
field is_paused: Bool = true

(* Contract Owner *)
(* Defaults to `initial_owner` *)
field contract_owner: ByStr20 = initial_owner

(* Contract ownership recipient *)
(* Defaults to `zero_address` *)
field contract_ownership_recipient: ByStr20 = zero_address

field token_address: ByStr20 = initial_token_contract

field administrators: Map ByStr20 Bool = Emp ByStr20 Bool

field vested_balances : Map ByStr20 (List Vest) = Emp ByStr20 (List Vest)

field claims : Map ByStr20 Uint128 = Emp ByStr20 Uint128 (* { user_address : token_amount }*)

field total_treasury_balances : Uint128 = zero

field total_claimed_balances : Uint128 = zero


(***************************************************)
(*             Validation procedure                   *)
(***************************************************)

procedure Throw(err: Error)
  e = make_error err;
  throw e
end

procedure RequireNotPaused()
  paused <- is_paused;
  match paused with
  | False =>
  | True =>
    (* Contract is paused *)
    error = PausedError;
    Throw error
  end
end

procedure RequirePaused()
  paused <- is_paused;
  match paused with
  | True =>
  | False =>
    (* Contract is paused *)
    error = NotPausedError;
    Throw error
  end
end

procedure RequireContractOwner()
  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    error = NotContractOwnerError;
    Throw error
  end
end

procedure RequireNotSelf(address_a: ByStr20, address_b: ByStr20)
  is_self = builtin eq address_a address_b;
  match is_self with
  | False =>
  | True =>
    error = SelfError;
    Throw error
  end
end

procedure RequireContractOwnerOrAdmin()
  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _sender;
  is_contract_admin <- exists administrators[_sender];

  is_allowed = orb is_contract_owner is_contract_admin;
  match is_allowed with
  | True =>
  | False =>
    error = NotContractOwnerOrAdminError;
    Throw error
  end
end

procedure EnsureNotZeroAddress(address : ByStr20)
  is_valid_address = builtin eq address zero_address;
  match is_valid_address with
  | False =>
  | True =>
    error = InvalidAddressPassed;
    Throw error
  end
end

procedure EnsureAmountIsNotZero(number: Uint128)
  gt_zero = uint128_gt number zero;
  match gt_zero with
  | True =>
  | False =>
    error = InvalidAmountPassed;
    Throw error
  end
end

procedure EnsureDateIsValid(start_date: Uint64)
  start_date_str = builtin to_string start_date;
  length_bystr = builtin strlen start_date_str;
  ideal_length = Uint32 16;
  is_date_valid = builtin eq length_bystr ideal_length;
  match is_date_valid with
  | False =>
    error = InvalidDatePassed;
    Throw error
  | True =>
  end
end

(***************************************************)
(*             Utility procedure                   *)
(***************************************************)

procedure Send(recipient : ByStr20, to_address : ByStr20, amount: Uint128)
  msg_to_token =  {
    _tag : "Transfer"; _recipient: recipient; _amount: zero;
    to: to_address; amount: amount
  };
  msgs = one_msg msg_to_token;
  send msgs
end

procedure DoSetTokenVesting(vesting_param: VestingParam)
  match vesting_param with
    | VestingParam address amount start_date expiry_time_in_days =>
      EnsureNotZeroAddress address;
      EnsureDateIsValid start_date;

      expiration_date = add_days_in_time start_date expiry_time_in_days;
      EnsureDateIsValid expiration_date;

      vested_param = Vest amount start_date expiration_date zero_uint64;
      maybe_vested_list <-vested_balances[address];
      match maybe_vested_list with
        | Some vested_params_list =>
          update_all_vested_params_fun = @update_all_vested_params (List Vest);
          updated_vested_params_list = update_all_vested_params_fun vested_params_list expiration_date;
          vested_params_list_new = Cons {Vest} vested_param updated_vested_params_list;
          vested_balances[address] := vested_params_list_new
        | None =>
          vest_params_list = Nil {Vest};
          vest_params_list_new = Cons {Vest} vested_param vest_params_list;
          vested_balances[address] := vest_params_list_new
      end;

      curr_treasury_balance <- total_treasury_balances;
      new_treasury_balance = builtin add curr_treasury_balance amount;
      total_treasury_balances:= new_treasury_balance
  end
end

(***************************************************)
(*               User transitions                  *)
(***************************************************)

transition Claim()
  RequireNotPaused;

  current_block <- & BLOCKNUMBER;
  prev_block = get_prev_bnum current_block;
  ts <-& TIMESTAMP(prev_block);
  current_timestamp = option_timestamp zero_uint64 ts;

  maybe_vested_list <-vested_balances[_sender];
  match maybe_vested_list with
    | Some vested_params_list =>
      calculate_all_claim_amount_fun = @calculate_all_claim_amount (List Vest);
      calculated_vested_amount = calculate_all_claim_amount_fun vested_params_list current_timestamp;
      
      claim <- claims[_sender];
      claim_amount = get_value claim;
      
      output_amount = builtin sub calculated_vested_amount claim_amount;
      is_claim_amount_zero = builtin eq output_amount zero;
      match is_claim_amount_zero with
        | False =>
          new_claim = builtin add claim_amount output_amount;
          claims[_sender]:=new_claim;

          curr_treasury_balance <- total_treasury_balances;
          new_treasury_balance = builtin sub curr_treasury_balance output_amount;
          total_treasury_balances:= new_treasury_balance;

          curr_claimed_balance <- total_claimed_balances;
          new_claimed_balance = builtin add curr_claimed_balance output_amount;
          total_claimed_balances:= new_claimed_balance;

          update_all_claimed_params_fun = @update_all_claimed_params (List Vest);
          updated_vested_params_list = update_all_claimed_params_fun vested_params_list current_timestamp;
          vested_balances[_sender] := updated_vested_params_list;

          token_addr <- token_address;
          Send token_addr _sender output_amount;
          
          e = { _eventname: "ClaimSuccess"; claim_balance: new_claim; recipient: _sender; received_amount: output_amount};
          event e
        | True =>
      end
    | None =>
  end
end

(***************************************************)
(*               Utility transitions               *)
(***************************************************)

(* Used by owner/admin to set vesting schedule *)
transition SetTokenVesting(vesting_param: VestingParam)
  RequireContractOwnerOrAdmin;
  DoSetTokenVesting vesting_param;
  e = { _eventname: "SetTokenVestingSuccess"};
  event e
end

(* Used by owner/admin to set vesting schedule *)
transition BatchSetTokenVesting(vesting_param_list: List VestingParam)
  RequireContractOwnerOrAdmin;
  forall vesting_param_list DoSetTokenVesting;
  e = { _eventname: "BatchSetTokenVesting"};
  event e
end

(* Used by owner to withraw token in case of contract change *)
transition WithdrawTokens(amount: Uint128)
  RequirePaused;
  RequireContractOwner;

  token_addr <- token_address;
  Send token_addr _sender amount;

  curr_treasury_balance <- total_treasury_balances;
  new_treasury_balance = builtin sub curr_treasury_balance amount;
  total_treasury_balances:= new_treasury_balance
end

(***************************************************)
(*               Configuration transitions         *)
(***************************************************)

transition Pause()
  RequireNotPaused;
  RequireContractOwner;

  is_paused := true;
  e = {
    _eventname: "Pause";
    is_paused: true
  };
  event e
end

transition Unpause()
  RequirePaused;
  RequireContractOwner;

  is_paused := false;
  e = {
    _eventname: "Unpause";
    is_paused: false
  };
  event e
end

transition AddAdmin(address : ByStr20)
  RequireContractOwner;
  administrators[address] := true;
  e = { _eventname: "AddAdminSuccess"; address: address};
  event e
end

transition RemoveAdmin(address : ByStr20)
  RequireContractOwner;
  delete administrators[address];
  e = { _eventname: "RemoveAdminSuccess"; address: address};
  event e
end

(* Sets `to` as the contract ownership recipient. *)
(* To reset `contract_ownership_recipient`, use `zero_address`. *)
(* i.e., `0x0000000000000000000000000000000000000000` *)
(* @param: to - Address of contract ownership recipient *)
(* @Requirements: *)
(* - `_sender` must be the contract owner. Otherwise, it must throw `NotContractOwnerError` *)
(* - `_sender` must not be `to`. Otherwise, it must throw `SelfError` *)
transition SetContractOwnershipRecipient(to: ByStr20)
  RequireContractOwner;
  RequireNotSelf to _sender;

  contract_ownership_recipient := to;

  e = {
    _eventname: "SetContractOwnershipRecipient";
    to: to
  };
  event e;
  msg_to_sender = {
    _tag: "SetContractOwnershipRecipientCallback";
    _recipient: _sender;
    _amount: Uint128 0;
    to: to
  };
  msgs = one_msg msg_to_sender;
  send msgs
end

(* Sets `contract_ownership_recipient` as the contract owner. *)
(* @Requirements: *)
(* - `_sender` must be the contract ownership recipient. Otherwise, it must throw `NotContractOwnershipRecipientError` *)
transition AcceptContractOwnership()
  recipient <- contract_ownership_recipient;

  is_recipient = builtin eq _sender recipient;
  match is_recipient with
  | False =>
    error = NotContractOwnershipRecipientError;
    Throw error
  | True =>
    contract_owner := _sender;
    contract_ownership_recipient := zero_address;

    e = {
      _eventname: "AcceptContractOwnership";
      contract_owner: _sender
    };
    event e;
    msg_to_sender = {
      _tag: "AcceptContractOwnershipCallback";
      _recipient: _sender;
      _amount: Uint128 0;
      contract_owner: _sender
    };
    msgs = one_msg msg_to_sender;
    send msgs
  end
end

(***************************************************)
(*               Callback Transitions              *)
(***************************************************)

transition TransferSuccessCallBack(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
end

transition RecipientAcceptTransfer(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
end

transition TransferFromSuccessCallBack(
  initiator : ByStr20,
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
end

transition RecipientAcceptTransferFrom(
  initiator : ByStr20,
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
end